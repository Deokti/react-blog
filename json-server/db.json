{
  "users": [
    {
      "id": 1,
      "username": "admin",
      "password": "admin"
    }
  ],
  "articles": [
    {
      "id": "1",
      "title": "JavaScript. Ядро: 2-ое издание",
      "subtitle": "Данная статья является вторым изданием обзорной лекции JavaScript. Ядро, посвященной языку программирования ECMAScript, и ключевым компонентам его рантайм-системы.",
      "img": "https://yt3.ggpht.com/ytc/AAUvwnhKwOuCqaYgI52PIs1hz1JN_9Iz7NZfECu_FE-YMQ=s900-c-k-c0x00ffffff-no-rj",
      "originalArticle": "http://dmitrysoshnikov.com/ecmascript/javascript-the-core-2nd-edition-rus/#prototip",
      "createdBy": "Dmitry Soshnikov",
      "createdAt": "2017-12-05",
      "views": 1000,
      "types": ["IT", "JavaScript", "ECMAScript"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Объект",
          "paragraph": [
            "ECMAScript — это объектно-ориентированный язык программирования с прототипной организацией, имеющий концепцию объекта в качестве базовой абстракции.",
            "Аудитория: опытные программисты, эксперты.",
            "Первое издание статьи описывает аспекты JavaScript с точки зрения стандарта ES3 (на данный момент устаревшего), c небольшими отсылками к соответствующим изменениям в ES5 и ES6 (также известного как ES2015).",
            "Начиная с ES2015, в спецификации поменялись описания и структуры некоторых ключевых компонентов, были введены новые модели, термины и т.д. И в данном издании мы фокусируемся на новых абстракциях, обновленной терминологии, однако сохраняя базовую структуру JS, не изменяющуюся на протяжении всех версий стандарта.",
            "Данная статья описывает рантайм-систему ES2017+.",
            "Мы начинаем нашу дискуссию с рассмотрения концепции объекта, являющейся фундаментальной абстракцией в ECMAScript."
          ]
        },
        {
          "id": "2",
          "type": "DEFINITION",
          "text": "Определение 1: Объект — это коллекция свойств, имеющая также связанный с ней объект-прототип. Прототипом может быть также другой объект, или же значение null."
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraph": [
            "Рассмотрим простейшую схему объекта, с которой будем работать в последующих описаниях. На свой прототип объект ссылается посредством внутреннего свойства [[Prototype]], которое доступно в пользовательском коде через свойство __proto__.",
            "Для кода:"
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "let point = {\n  x: 10,\n  y: 20,\n};"
        },
        {
          "id": "5",
          "type": "TEXT",
          "paragraph": [
            "мы имеем следующую структуру с двумя явными собственными свойствами и одним неявным (внутренним) свойством __proto__, которое является ссылкой на прототип объекта point:"
          ]
        },
        {
          "id": "6",
          "type": "IMAGE",
          "src": "http://dmitrysoshnikov.com/wp-content/uploads/2017/11/js-object.png",
          "title": "Схема 1. Простейший объект с прототипом."
        },
        {
          "id": "7",
          "type": "NOTE",
          "text": "Обратите внимание: объекты также могут хранить символы."
        },
        {
          "id": "8",
          "type": "TEXT",
          "paragraph": [
            "Прототипные объекты используются для реализации наследования при помощи механизма динамической диспетчеризации (dynamic dispatch). Рассмотрим понятие цепи прототипов, чтобы увидеть этот механизм в действии."
          ]
        }
      ]
    }
  ],
  "profile": {
    "username": "KaizDA",
    "firstname": "Kain",
    "lastname": "Randolph",
    "age": 24,
    "currency": "RUB",
    "country": "Russia",
    "city": "Moscow",
    "avatar": "https://sun6-22.userapi.com/s/v1/if1/Pr3hfZHumqP2o7GDvHiUBtZmqjlh0plvSrlFfow41X8zoHPMn5Csr6agnOc70WmVdi3jbw.jpg?size=500x618&quality=96&crop=0,0,500,618&ava=1"
  }
}
